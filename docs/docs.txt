# Builtin documentation file
# Lines starting with '#' are comments and are ignored
# Topics are separated by '\n\n-'
# New lines within topics are preserved, it is not width limited when printed
# so lines should not be too long.
# The order of topics in this file is important, new ones should only be added
# at the end of the file

- Unicode
This implementation follows the unicode rules specified in R7RS.  It is assumed
that all source files are encoded using utf-8, no other encodings are accepted.
For whitespace all possible unicode line endings are considered, that being
"line feed", "vertical tab", "form feed", "carriage return", "carriage return +
line feed", "next line", "line separator" and "paragraph separator".  All other
characters with the unicode property "whitespace" are considered as non-line
ending whitespace.
Symbols are normalised in the reader.  If the reader is in case sensitive
mode (the default) NFC normalisation is used, if case insensitive mode then
NFKC is used, these choices are the default according to unicode UAX-31.  If
converting strings to symbols at run time, then it is recommended that this
normalisation should also be applied, but it is not done automatically due to
symbols using string-eq for comparison, which is not normalising.  This
normalisation only applies to symbols, not string literals or other tokens.  To
be more precise, when in case in-sensitive mode, the function
`nfkc(full_casefold(symbol))` is applied before the symbol is stored internally.
Full casefold is taken to not include any language specific mappings.

- Numeric Representation
Numbers can be specified as either exact or inexact using `#e` or `#i` number
prefixes respectively.  If the number after the prefix can only be represented
as inexact, but the exact prefix is specified an error will be thrown.
The integer types used internally have infinite (with in system memory
limitations) precision.  Numbers can also be specified as fractions, which are
stored exactly, they are not converted to floating point types.
Decimal numbers have five different exponent markers, `e`, `s`, `f`, `d` and
`l`.  These can be specified after a base 10 number that is not a fraction.
Exponent markers `s` (for `short`) and `f` (for `float`) use a 32 bit single
precision floating point numeric representation.  Exponent markers `d` (for
`double`) and `l` (for `long`) use a 64 bit double precision floating point
representation.  Exponent marker `e` specifies the system default representation
which is implementation defined to be a 64 bit double precision floating point
number.
Complex numbers' internal representation allows for any of the prior number
formats for both their real and imaginary components, there is no restriction
that both components use the same format.  Due to this each component has
its own exactness and the overall number is exact if and only if both of the
components are exact.
If integers can be stored in a 64 bit signed integer instead of an arbitrary
precision integer they will be. They will be promoted to an arbitrary precision
integer if the result of a numeric operation requires it.
In general integers are promoted to arbitrary precision integers, arbitrary
precision rational (fractional) numbers and then 64 bit floating point numbers
as required, where converting to floating point looses exactness.  An attempt
to use the earliest type in that list will be made, however once a number is
promoted to floating point, it will never be implicitly converted back again.
In numeric literals, any continuous sequence of digits at the end of a number
can be replaced with `#`.  These will be replaced with the digit 0, for example
`123#` => `1230` and `5#.##` => `50.00`.  If any numeric digits are present
after the first `#` it is considered an error.  This also has the effect of
making the number become inexact, this will force the number to become a
floating point type, by default 64 bit, unless specified otherwise by a decimal
exponent suffix.

- Warning: Error
This replaces all warnings with fatal errors, not allowing execution. Error
reporting is not changed, the same number of errors and warnings combined should
be reported regardless of this option.  Default = false.

- Warning: Unicode Identifiers
This warning is triggered if a non-ascii unicode character is present in an
identifier.  Checks occur after checking if it is possible for the character to
be in an identifier.  Default = Allow.

- Characters
Character literals starting with `#\` can either have a single character or the
name of a character in them.  Delimiters such as spaces and parenthesises can be
in character literals, so `#\ ` is a single space character.  Several attempts
are made at interpreting any name given, the first one that succeeds will be
used.
1. If the name is `alarm`, `backspace`, `delete`, `escape`, `newline`, `null`,
   `return`, `space` or `tab`, (case insensitive) then the relevant character is
   inserted.
2. If the name begins with `x` (case insensitive) then the remainder of the name
   is parsed as a hexadecimal number which is interpreted as a unicode code
   point.  If parsing fails or the number is out of range, then the next option
   is attempted
3. The name has `-` and `_` replaced with spaces and is then used to lookup
   unicode character names, for example `#\latin-small-letter-n` == `#\n`
4. If the name starts with a lower case letter, then "small" otherwise "capital"
   is chosen in `latin {size} letter {name}`, for example `#\iota` ==
   `#\latin-small-letter-iota` and `#\Iota` == `#\latin-capital-letter-iota`
Otherwise, the character literal is invalid.
